Terminals unused in grammar

   INPUT
   OUTPUT
   DO
   WHILE
   FOR
   UNTIL
   CHAR
   STRING
   BAR
   SFINT
   SFFLT
   SFSTR
   SFCHR
   SFBOL
   QU


State 19 conflicts: 1 shift/reduce, 2 reduce/reduce
State 28 conflicts: 1 shift/reduce, 2 reduce/reduce
State 118 conflicts: 1 shift/reduce
State 154 conflicts: 1 shift/reduce, 2 reduce/reduce
State 169 conflicts: 1 shift/reduce, 2 reduce/reduce
State 175 conflicts: 1 shift/reduce


Grammar

    0 $accept: s $end

    1 s: start program fin

    2 start: OP XLA DOCP IDP CL

    3 fin: OCL DOCP CL

    4 program: variable constante body
    5        | variable body
    6        | body

    7 body: OP BODY CL bloc_inst OCL BODY CL

    8 variable: OP SUB VARIABLE CL declare OCL SUB VARIABLE CL

    9 declare: OP dec SCL declare
   10        | arrays

   11 arrays: OP ARRAY AS arraytype CL arraysdec OCL ARRAY CL arrays
   12       | /* empty */

   13 arraytype: INT
   14          | FLT
   15          | CHR

   16 arraysdec: OP IDF DP INTEGER SCL arraysdec
   17          | /* empty */

   18 dec: IDF AS INT
   19    | IDF AS FLT
   20    | IDF AS CHR
   21    | IDF AS STR
   22    | IDF AS BOL

   23 constante: OP SUB CONSTANTE CL ass OCL SUB CONSTANTE CL

   24 ass: OP impl SCL ass
   25    | /* empty */

   26 impl: IDF AFC INTEGER
   27     | IDF AFC FLOAT

   28 bloc_inst: instruction bloc_inst
   29          | /* empty */

   30 instruction: affect
   31            | condition

   32 affect: OP AFF DP IDF V exp SCL affect
   33       | /* empty */

   34 exp: exp ADD exp
   35    | exp MIN exp
   36    | exp MUL exp
   37    | exp DIV exp
   38    | OPR exp CPR
   39    | INTEGER
   40    | FLOAT
   41    | IDF

   42 condition: OP IF DP exp_log CL then else OCL IF CL condition
   43          | /* empty */

   44 then: OP THEN CL bloc_inst OCL THEN CL

   45 else: OP ELSE CL bloc_inst OCL ELSE CL
   46     | /* empty */

   47 exp_log: AND OPR exp V exps CPR
   48        | OR OPR exp V exps CPR
   49        | NOT OPR exp CPR
   50        | SUP OPR exp V exp CPR
   51        | INF OPR exp V exp CPR
   52        | SUPE OPR exp V exp CPR
   53        | INFE OPR exp V exp CPR
   54        | EGA OPR exp V exp CPR
   55        | DIF OPR exp V exp CPR

   56 exps: exp exps
   57     | /* empty */


Terminals, with rules where they appear

$end (0) 0
error (256)
VARIABLE (258) 8
BODY (259) 7
CONSTANTE (260) 23
IDF (261) 16 18 19 20 21 22 26 27 32 41
AS (262) 11 18 19 20 21 22
IDP (263) 2
DOCP (264) 2 3
SUB (265) 8 23
OR (266) 48
AND (267) 47
SUP (268) 50
SUPE (269) 52
INF (270) 51
INFE (271) 53
EGA (272) 54
DIF (273) 55
NOT (274) 49
AFF (275) 32
INPUT (276)
OUTPUT (277)
IF (278) 42
THEN (279) 44
ELSE (280) 45
DO (281)
WHILE (282)
FOR (283)
UNTIL (284)
ARRAY (285) 11
INT (286) 13 18
FLT (287) 14 19
STR (288) 21
CHR (289) 15 20
BOL (290) 22
INTEGER (291) 16 26 39
FLOAT (292) 27 40
CHAR (293)
STRING (294)
OP (295) 2 7 8 9 11 16 23 24 32 42 44 45
CL (296) 2 3 7 8 11 23 42 44 45
SCL (297) 9 16 24 32
OCL (298) 3 7 8 11 23 42 44 45
XLA (299) 2
MIN (300) 35
ADD (301) 34
MUL (302) 36
DIV (303) 37
BAR (304)
DP (305) 16 32 42
V (306) 32 47 48 50 51 52 53 54 55
SFINT (307)
SFFLT (308)
SFSTR (309)
SFCHR (310)
SFBOL (311)
AFC (312) 26 27
OPR (313) 38 47 48 49 50 51 52 53 54 55
CPR (314) 38 47 48 49 50 51 52 53 54 55
QU (315)


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
s (62)
    on left: 1, on right: 0
start (63)
    on left: 2, on right: 1
fin (64)
    on left: 3, on right: 1
program (65)
    on left: 4 5 6, on right: 1
body (66)
    on left: 7, on right: 4 5 6
variable (67)
    on left: 8, on right: 4 5
declare (68)
    on left: 9 10, on right: 8 9
arrays (69)
    on left: 11 12, on right: 10 11
arraytype (70)
    on left: 13 14 15, on right: 11
arraysdec (71)
    on left: 16 17, on right: 11 16
dec (72)
    on left: 18 19 20 21 22, on right: 9
constante (73)
    on left: 23, on right: 4
ass (74)
    on left: 24 25, on right: 23 24
impl (75)
    on left: 26 27, on right: 24
bloc_inst (76)
    on left: 28 29, on right: 7 28 44 45
instruction (77)
    on left: 30 31, on right: 28
affect (78)
    on left: 32 33, on right: 30 32
exp (79)
    on left: 34 35 36 37 38 39 40 41, on right: 32 34 35 36 37 38 47
    48 49 50 51 52 53 54 55 56
condition (80)
    on left: 42 43, on right: 31 42
then (81)
    on left: 44, on right: 42
else (82)
    on left: 45 46, on right: 42
exp_log (83)
    on left: 47 48 49 50 51 52 53 54 55, on right: 42
exps (84)
    on left: 56 57, on right: 47 48 56


state 0

    0 $accept: . s $end

    OP  shift, and go to state 1

    s      go to state 2
    start  go to state 3


state 1

    2 start: OP . XLA DOCP IDP CL

    XLA  shift, and go to state 4


state 2

    0 $accept: s . $end

    $end  shift, and go to state 5


state 3

    1 s: start . program fin

    OP  shift, and go to state 6

    program   go to state 7
    body      go to state 8
    variable  go to state 9


state 4

    2 start: OP XLA . DOCP IDP CL

    DOCP  shift, and go to state 10


state 5

    0 $accept: s $end .

    $default  accept


state 6

    7 body: OP . BODY CL bloc_inst OCL BODY CL
    8 variable: OP . SUB VARIABLE CL declare OCL SUB VARIABLE CL

    BODY  shift, and go to state 11
    SUB   shift, and go to state 12


state 7

    1 s: start program . fin

    OCL  shift, and go to state 13

    fin  go to state 14


state 8

    6 program: body .

    $default  reduce using rule 6 (program)


state 9

    4 program: variable . constante body
    5        | variable . body

    OP  shift, and go to state 15

    body       go to state 16
    constante  go to state 17


state 10

    2 start: OP XLA DOCP . IDP CL

    IDP  shift, and go to state 18


state 11

    7 body: OP BODY . CL bloc_inst OCL BODY CL

    CL  shift, and go to state 19


state 12

    8 variable: OP SUB . VARIABLE CL declare OCL SUB VARIABLE CL

    VARIABLE  shift, and go to state 20


state 13

    3 fin: OCL . DOCP CL

    DOCP  shift, and go to state 21


state 14

    1 s: start program fin .

    $default  reduce using rule 1 (s)


state 15

    7 body: OP . BODY CL bloc_inst OCL BODY CL
   23 constante: OP . SUB CONSTANTE CL ass OCL SUB CONSTANTE CL

    BODY  shift, and go to state 11
    SUB   shift, and go to state 22


state 16

    5 program: variable body .

    $default  reduce using rule 5 (program)


state 17

    4 program: variable constante . body

    OP  shift, and go to state 23

    body  go to state 24


state 18

    2 start: OP XLA DOCP IDP . CL

    CL  shift, and go to state 25


state 19

    7 body: OP BODY CL . bloc_inst OCL BODY CL

    OP  shift, and go to state 26

    OP        [reduce using rule 33 (affect)]
    OP        [reduce using rule 43 (condition)]
    OCL       reduce using rule 29 (bloc_inst)
    OCL       [reduce using rule 33 (affect)]
    OCL       [reduce using rule 43 (condition)]
    $default  reduce using rule 29 (bloc_inst)

    bloc_inst    go to state 27
    instruction  go to state 28
    affect       go to state 29
    condition    go to state 30


state 20

    8 variable: OP SUB VARIABLE . CL declare OCL SUB VARIABLE CL

    CL  shift, and go to state 31


state 21

    3 fin: OCL DOCP . CL

    CL  shift, and go to state 32


state 22

   23 constante: OP SUB . CONSTANTE CL ass OCL SUB CONSTANTE CL

    CONSTANTE  shift, and go to state 33


state 23

    7 body: OP . BODY CL bloc_inst OCL BODY CL

    BODY  shift, and go to state 11


state 24

    4 program: variable constante body .

    $default  reduce using rule 4 (program)


state 25

    2 start: OP XLA DOCP IDP CL .

    $default  reduce using rule 2 (start)


state 26

   32 affect: OP . AFF DP IDF V exp SCL affect
   42 condition: OP . IF DP exp_log CL then else OCL IF CL condition

    AFF  shift, and go to state 34
    IF   shift, and go to state 35


state 27

    7 body: OP BODY CL bloc_inst . OCL BODY CL

    OCL  shift, and go to state 36


state 28

   28 bloc_inst: instruction . bloc_inst

    OP  shift, and go to state 26

    OP        [reduce using rule 33 (affect)]
    OP        [reduce using rule 43 (condition)]
    OCL       reduce using rule 29 (bloc_inst)
    OCL       [reduce using rule 33 (affect)]
    OCL       [reduce using rule 43 (condition)]
    $default  reduce using rule 29 (bloc_inst)

    bloc_inst    go to state 37
    instruction  go to state 28
    affect       go to state 29
    condition    go to state 30


state 29

   30 instruction: affect .

    $default  reduce using rule 30 (instruction)


state 30

   31 instruction: condition .

    $default  reduce using rule 31 (instruction)


state 31

    8 variable: OP SUB VARIABLE CL . declare OCL SUB VARIABLE CL

    OP  shift, and go to state 38

    $default  reduce using rule 12 (arrays)

    declare  go to state 39
    arrays   go to state 40


state 32

    3 fin: OCL DOCP CL .

    $default  reduce using rule 3 (fin)


state 33

   23 constante: OP SUB CONSTANTE . CL ass OCL SUB CONSTANTE CL

    CL  shift, and go to state 41


state 34

   32 affect: OP AFF . DP IDF V exp SCL affect

    DP  shift, and go to state 42


state 35

   42 condition: OP IF . DP exp_log CL then else OCL IF CL condition

    DP  shift, and go to state 43


state 36

    7 body: OP BODY CL bloc_inst OCL . BODY CL

    BODY  shift, and go to state 44


state 37

   28 bloc_inst: instruction bloc_inst .

    $default  reduce using rule 28 (bloc_inst)


state 38

    9 declare: OP . dec SCL declare
   11 arrays: OP . ARRAY AS arraytype CL arraysdec OCL ARRAY CL arrays

    IDF    shift, and go to state 45
    ARRAY  shift, and go to state 46

    dec  go to state 47


state 39

    8 variable: OP SUB VARIABLE CL declare . OCL SUB VARIABLE CL

    OCL  shift, and go to state 48


state 40

   10 declare: arrays .

    $default  reduce using rule 10 (declare)


state 41

   23 constante: OP SUB CONSTANTE CL . ass OCL SUB CONSTANTE CL

    OP  shift, and go to state 49

    $default  reduce using rule 25 (ass)

    ass  go to state 50


state 42

   32 affect: OP AFF DP . IDF V exp SCL affect

    IDF  shift, and go to state 51


state 43

   42 condition: OP IF DP . exp_log CL then else OCL IF CL condition

    OR    shift, and go to state 52
    AND   shift, and go to state 53
    SUP   shift, and go to state 54
    SUPE  shift, and go to state 55
    INF   shift, and go to state 56
    INFE  shift, and go to state 57
    EGA   shift, and go to state 58
    DIF   shift, and go to state 59
    NOT   shift, and go to state 60

    exp_log  go to state 61


state 44

    7 body: OP BODY CL bloc_inst OCL BODY . CL

    CL  shift, and go to state 62


state 45

   18 dec: IDF . AS INT
   19    | IDF . AS FLT
   20    | IDF . AS CHR
   21    | IDF . AS STR
   22    | IDF . AS BOL

    AS  shift, and go to state 63


state 46

   11 arrays: OP ARRAY . AS arraytype CL arraysdec OCL ARRAY CL arrays

    AS  shift, and go to state 64


state 47

    9 declare: OP dec . SCL declare

    SCL  shift, and go to state 65


state 48

    8 variable: OP SUB VARIABLE CL declare OCL . SUB VARIABLE CL

    SUB  shift, and go to state 66


state 49

   24 ass: OP . impl SCL ass

    IDF  shift, and go to state 67

    impl  go to state 68


state 50

   23 constante: OP SUB CONSTANTE CL ass . OCL SUB CONSTANTE CL

    OCL  shift, and go to state 69


state 51

   32 affect: OP AFF DP IDF . V exp SCL affect

    V  shift, and go to state 70


state 52

   48 exp_log: OR . OPR exp V exps CPR

    OPR  shift, and go to state 71


state 53

   47 exp_log: AND . OPR exp V exps CPR

    OPR  shift, and go to state 72


state 54

   50 exp_log: SUP . OPR exp V exp CPR

    OPR  shift, and go to state 73


state 55

   52 exp_log: SUPE . OPR exp V exp CPR

    OPR  shift, and go to state 74


state 56

   51 exp_log: INF . OPR exp V exp CPR

    OPR  shift, and go to state 75


state 57

   53 exp_log: INFE . OPR exp V exp CPR

    OPR  shift, and go to state 76


state 58

   54 exp_log: EGA . OPR exp V exp CPR

    OPR  shift, and go to state 77


state 59

   55 exp_log: DIF . OPR exp V exp CPR

    OPR  shift, and go to state 78


state 60

   49 exp_log: NOT . OPR exp CPR

    OPR  shift, and go to state 79


state 61

   42 condition: OP IF DP exp_log . CL then else OCL IF CL condition

    CL  shift, and go to state 80


state 62

    7 body: OP BODY CL bloc_inst OCL BODY CL .

    $default  reduce using rule 7 (body)


state 63

   18 dec: IDF AS . INT
   19    | IDF AS . FLT
   20    | IDF AS . CHR
   21    | IDF AS . STR
   22    | IDF AS . BOL

    INT  shift, and go to state 81
    FLT  shift, and go to state 82
    STR  shift, and go to state 83
    CHR  shift, and go to state 84
    BOL  shift, and go to state 85


state 64

   11 arrays: OP ARRAY AS . arraytype CL arraysdec OCL ARRAY CL arrays

    INT  shift, and go to state 86
    FLT  shift, and go to state 87
    CHR  shift, and go to state 88

    arraytype  go to state 89


state 65

    9 declare: OP dec SCL . declare

    OP  shift, and go to state 38

    $default  reduce using rule 12 (arrays)

    declare  go to state 90
    arrays   go to state 40


state 66

    8 variable: OP SUB VARIABLE CL declare OCL SUB . VARIABLE CL

    VARIABLE  shift, and go to state 91


state 67

   26 impl: IDF . AFC INTEGER
   27     | IDF . AFC FLOAT

    AFC  shift, and go to state 92


state 68

   24 ass: OP impl . SCL ass

    SCL  shift, and go to state 93


state 69

   23 constante: OP SUB CONSTANTE CL ass OCL . SUB CONSTANTE CL

    SUB  shift, and go to state 94


state 70

   32 affect: OP AFF DP IDF V . exp SCL affect

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 99


state 71

   48 exp_log: OR OPR . exp V exps CPR

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 100


state 72

   47 exp_log: AND OPR . exp V exps CPR

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 101


state 73

   50 exp_log: SUP OPR . exp V exp CPR

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 102


state 74

   52 exp_log: SUPE OPR . exp V exp CPR

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 103


state 75

   51 exp_log: INF OPR . exp V exp CPR

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 104


state 76

   53 exp_log: INFE OPR . exp V exp CPR

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 105


state 77

   54 exp_log: EGA OPR . exp V exp CPR

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 106


state 78

   55 exp_log: DIF OPR . exp V exp CPR

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 107


state 79

   49 exp_log: NOT OPR . exp CPR

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 108


state 80

   42 condition: OP IF DP exp_log CL . then else OCL IF CL condition

    OP  shift, and go to state 109

    then  go to state 110


state 81

   18 dec: IDF AS INT .

    $default  reduce using rule 18 (dec)


state 82

   19 dec: IDF AS FLT .

    $default  reduce using rule 19 (dec)


state 83

   21 dec: IDF AS STR .

    $default  reduce using rule 21 (dec)


state 84

   20 dec: IDF AS CHR .

    $default  reduce using rule 20 (dec)


state 85

   22 dec: IDF AS BOL .

    $default  reduce using rule 22 (dec)


state 86

   13 arraytype: INT .

    $default  reduce using rule 13 (arraytype)


state 87

   14 arraytype: FLT .

    $default  reduce using rule 14 (arraytype)


state 88

   15 arraytype: CHR .

    $default  reduce using rule 15 (arraytype)


state 89

   11 arrays: OP ARRAY AS arraytype . CL arraysdec OCL ARRAY CL arrays

    CL  shift, and go to state 111


state 90

    9 declare: OP dec SCL declare .

    $default  reduce using rule 9 (declare)


state 91

    8 variable: OP SUB VARIABLE CL declare OCL SUB VARIABLE . CL

    CL  shift, and go to state 112


state 92

   26 impl: IDF AFC . INTEGER
   27     | IDF AFC . FLOAT

    INTEGER  shift, and go to state 113
    FLOAT    shift, and go to state 114


state 93

   24 ass: OP impl SCL . ass

    OP  shift, and go to state 49

    $default  reduce using rule 25 (ass)

    ass  go to state 115


state 94

   23 constante: OP SUB CONSTANTE CL ass OCL SUB . CONSTANTE CL

    CONSTANTE  shift, and go to state 116


state 95

   41 exp: IDF .

    $default  reduce using rule 41 (exp)


state 96

   39 exp: INTEGER .

    $default  reduce using rule 39 (exp)


state 97

   40 exp: FLOAT .

    $default  reduce using rule 40 (exp)


state 98

   38 exp: OPR . exp CPR

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 117


state 99

   32 affect: OP AFF DP IDF V exp . SCL affect
   34 exp: exp . ADD exp
   35    | exp . MIN exp
   36    | exp . MUL exp
   37    | exp . DIV exp

    SCL  shift, and go to state 118
    MIN  shift, and go to state 119
    ADD  shift, and go to state 120
    MUL  shift, and go to state 121
    DIV  shift, and go to state 122


state 100

   34 exp: exp . ADD exp
   35    | exp . MIN exp
   36    | exp . MUL exp
   37    | exp . DIV exp
   48 exp_log: OR OPR exp . V exps CPR

    MIN  shift, and go to state 119
    ADD  shift, and go to state 120
    MUL  shift, and go to state 121
    DIV  shift, and go to state 122
    V    shift, and go to state 123


state 101

   34 exp: exp . ADD exp
   35    | exp . MIN exp
   36    | exp . MUL exp
   37    | exp . DIV exp
   47 exp_log: AND OPR exp . V exps CPR

    MIN  shift, and go to state 119
    ADD  shift, and go to state 120
    MUL  shift, and go to state 121
    DIV  shift, and go to state 122
    V    shift, and go to state 124


state 102

   34 exp: exp . ADD exp
   35    | exp . MIN exp
   36    | exp . MUL exp
   37    | exp . DIV exp
   50 exp_log: SUP OPR exp . V exp CPR

    MIN  shift, and go to state 119
    ADD  shift, and go to state 120
    MUL  shift, and go to state 121
    DIV  shift, and go to state 122
    V    shift, and go to state 125


state 103

   34 exp: exp . ADD exp
   35    | exp . MIN exp
   36    | exp . MUL exp
   37    | exp . DIV exp
   52 exp_log: SUPE OPR exp . V exp CPR

    MIN  shift, and go to state 119
    ADD  shift, and go to state 120
    MUL  shift, and go to state 121
    DIV  shift, and go to state 122
    V    shift, and go to state 126


state 104

   34 exp: exp . ADD exp
   35    | exp . MIN exp
   36    | exp . MUL exp
   37    | exp . DIV exp
   51 exp_log: INF OPR exp . V exp CPR

    MIN  shift, and go to state 119
    ADD  shift, and go to state 120
    MUL  shift, and go to state 121
    DIV  shift, and go to state 122
    V    shift, and go to state 127


state 105

   34 exp: exp . ADD exp
   35    | exp . MIN exp
   36    | exp . MUL exp
   37    | exp . DIV exp
   53 exp_log: INFE OPR exp . V exp CPR

    MIN  shift, and go to state 119
    ADD  shift, and go to state 120
    MUL  shift, and go to state 121
    DIV  shift, and go to state 122
    V    shift, and go to state 128


state 106

   34 exp: exp . ADD exp
   35    | exp . MIN exp
   36    | exp . MUL exp
   37    | exp . DIV exp
   54 exp_log: EGA OPR exp . V exp CPR

    MIN  shift, and go to state 119
    ADD  shift, and go to state 120
    MUL  shift, and go to state 121
    DIV  shift, and go to state 122
    V    shift, and go to state 129


state 107

   34 exp: exp . ADD exp
   35    | exp . MIN exp
   36    | exp . MUL exp
   37    | exp . DIV exp
   55 exp_log: DIF OPR exp . V exp CPR

    MIN  shift, and go to state 119
    ADD  shift, and go to state 120
    MUL  shift, and go to state 121
    DIV  shift, and go to state 122
    V    shift, and go to state 130


state 108

   34 exp: exp . ADD exp
   35    | exp . MIN exp
   36    | exp . MUL exp
   37    | exp . DIV exp
   49 exp_log: NOT OPR exp . CPR

    MIN  shift, and go to state 119
    ADD  shift, and go to state 120
    MUL  shift, and go to state 121
    DIV  shift, and go to state 122
    CPR  shift, and go to state 131


state 109

   44 then: OP . THEN CL bloc_inst OCL THEN CL

    THEN  shift, and go to state 132


state 110

   42 condition: OP IF DP exp_log CL then . else OCL IF CL condition

    OP  shift, and go to state 133

    $default  reduce using rule 46 (else)

    else  go to state 134


state 111

   11 arrays: OP ARRAY AS arraytype CL . arraysdec OCL ARRAY CL arrays

    OP  shift, and go to state 135

    $default  reduce using rule 17 (arraysdec)

    arraysdec  go to state 136


state 112

    8 variable: OP SUB VARIABLE CL declare OCL SUB VARIABLE CL .

    $default  reduce using rule 8 (variable)


state 113

   26 impl: IDF AFC INTEGER .

    $default  reduce using rule 26 (impl)


state 114

   27 impl: IDF AFC FLOAT .

    $default  reduce using rule 27 (impl)


state 115

   24 ass: OP impl SCL ass .

    $default  reduce using rule 24 (ass)


state 116

   23 constante: OP SUB CONSTANTE CL ass OCL SUB CONSTANTE . CL

    CL  shift, and go to state 137


state 117

   34 exp: exp . ADD exp
   35    | exp . MIN exp
   36    | exp . MUL exp
   37    | exp . DIV exp
   38    | OPR exp . CPR

    MIN  shift, and go to state 119
    ADD  shift, and go to state 120
    MUL  shift, and go to state 121
    DIV  shift, and go to state 122
    CPR  shift, and go to state 138


state 118

   32 affect: OP AFF DP IDF V exp SCL . affect

    OP  shift, and go to state 139

    OP        [reduce using rule 33 (affect)]
    $default  reduce using rule 33 (affect)

    affect  go to state 140


state 119

   35 exp: exp MIN . exp

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 141


state 120

   34 exp: exp ADD . exp

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 142


state 121

   36 exp: exp MUL . exp

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 143


state 122

   37 exp: exp DIV . exp

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 144


state 123

   48 exp_log: OR OPR exp V . exps CPR

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    $default  reduce using rule 57 (exps)

    exp   go to state 145
    exps  go to state 146


state 124

   47 exp_log: AND OPR exp V . exps CPR

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    $default  reduce using rule 57 (exps)

    exp   go to state 145
    exps  go to state 147


state 125

   50 exp_log: SUP OPR exp V . exp CPR

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 148


state 126

   52 exp_log: SUPE OPR exp V . exp CPR

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 149


state 127

   51 exp_log: INF OPR exp V . exp CPR

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 150


state 128

   53 exp_log: INFE OPR exp V . exp CPR

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 151


state 129

   54 exp_log: EGA OPR exp V . exp CPR

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 152


state 130

   55 exp_log: DIF OPR exp V . exp CPR

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    OPR      shift, and go to state 98

    exp  go to state 153


state 131

   49 exp_log: NOT OPR exp CPR .

    $default  reduce using rule 49 (exp_log)


state 132

   44 then: OP THEN . CL bloc_inst OCL THEN CL

    CL  shift, and go to state 154


state 133

   45 else: OP . ELSE CL bloc_inst OCL ELSE CL

    ELSE  shift, and go to state 155


state 134

   42 condition: OP IF DP exp_log CL then else . OCL IF CL condition

    OCL  shift, and go to state 156


state 135

   16 arraysdec: OP . IDF DP INTEGER SCL arraysdec

    IDF  shift, and go to state 157


state 136

   11 arrays: OP ARRAY AS arraytype CL arraysdec . OCL ARRAY CL arrays

    OCL  shift, and go to state 158


state 137

   23 constante: OP SUB CONSTANTE CL ass OCL SUB CONSTANTE CL .

    $default  reduce using rule 23 (constante)


state 138

   38 exp: OPR exp CPR .

    $default  reduce using rule 38 (exp)


state 139

   32 affect: OP . AFF DP IDF V exp SCL affect

    AFF  shift, and go to state 34


state 140

   32 affect: OP AFF DP IDF V exp SCL affect .

    $default  reduce using rule 32 (affect)


state 141

   34 exp: exp . ADD exp
   35    | exp . MIN exp
   35    | exp MIN exp .
   36    | exp . MUL exp
   37    | exp . DIV exp

    MUL  shift, and go to state 121
    DIV  shift, and go to state 122

    $default  reduce using rule 35 (exp)


state 142

   34 exp: exp . ADD exp
   34    | exp ADD exp .
   35    | exp . MIN exp
   36    | exp . MUL exp
   37    | exp . DIV exp

    MUL  shift, and go to state 121
    DIV  shift, and go to state 122

    $default  reduce using rule 34 (exp)


state 143

   34 exp: exp . ADD exp
   35    | exp . MIN exp
   36    | exp . MUL exp
   36    | exp MUL exp .
   37    | exp . DIV exp

    $default  reduce using rule 36 (exp)


state 144

   34 exp: exp . ADD exp
   35    | exp . MIN exp
   36    | exp . MUL exp
   37    | exp . DIV exp
   37    | exp DIV exp .

    $default  reduce using rule 37 (exp)


state 145

   34 exp: exp . ADD exp
   35    | exp . MIN exp
   36    | exp . MUL exp
   37    | exp . DIV exp
   56 exps: exp . exps

    IDF      shift, and go to state 95
    INTEGER  shift, and go to state 96
    FLOAT    shift, and go to state 97
    MIN      shift, and go to state 119
    ADD      shift, and go to state 120
    MUL      shift, and go to state 121
    DIV      shift, and go to state 122
    OPR      shift, and go to state 98

    $default  reduce using rule 57 (exps)

    exp   go to state 145
    exps  go to state 159


state 146

   48 exp_log: OR OPR exp V exps . CPR

    CPR  shift, and go to state 160


state 147

   47 exp_log: AND OPR exp V exps . CPR

    CPR  shift, and go to state 161


state 148

   34 exp: exp . ADD exp
   35    | exp . MIN exp
   36    | exp . MUL exp
   37    | exp . DIV exp
   50 exp_log: SUP OPR exp V exp . CPR

    MIN  shift, and go to state 119
    ADD  shift, and go to state 120
    MUL  shift, and go to state 121
    DIV  shift, and go to state 122
    CPR  shift, and go to state 162


state 149

   34 exp: exp . ADD exp
   35    | exp . MIN exp
   36    | exp . MUL exp
   37    | exp . DIV exp
   52 exp_log: SUPE OPR exp V exp . CPR

    MIN  shift, and go to state 119
    ADD  shift, and go to state 120
    MUL  shift, and go to state 121
    DIV  shift, and go to state 122
    CPR  shift, and go to state 163


state 150

   34 exp: exp . ADD exp
   35    | exp . MIN exp
   36    | exp . MUL exp
   37    | exp . DIV exp
   51 exp_log: INF OPR exp V exp . CPR

    MIN  shift, and go to state 119
    ADD  shift, and go to state 120
    MUL  shift, and go to state 121
    DIV  shift, and go to state 122
    CPR  shift, and go to state 164


state 151

   34 exp: exp . ADD exp
   35    | exp . MIN exp
   36    | exp . MUL exp
   37    | exp . DIV exp
   53 exp_log: INFE OPR exp V exp . CPR

    MIN  shift, and go to state 119
    ADD  shift, and go to state 120
    MUL  shift, and go to state 121
    DIV  shift, and go to state 122
    CPR  shift, and go to state 165


state 152

   34 exp: exp . ADD exp
   35    | exp . MIN exp
   36    | exp . MUL exp
   37    | exp . DIV exp
   54 exp_log: EGA OPR exp V exp . CPR

    MIN  shift, and go to state 119
    ADD  shift, and go to state 120
    MUL  shift, and go to state 121
    DIV  shift, and go to state 122
    CPR  shift, and go to state 166


state 153

   34 exp: exp . ADD exp
   35    | exp . MIN exp
   36    | exp . MUL exp
   37    | exp . DIV exp
   55 exp_log: DIF OPR exp V exp . CPR

    MIN  shift, and go to state 119
    ADD  shift, and go to state 120
    MUL  shift, and go to state 121
    DIV  shift, and go to state 122
    CPR  shift, and go to state 167


state 154

   44 then: OP THEN CL . bloc_inst OCL THEN CL

    OP  shift, and go to state 26

    OP        [reduce using rule 33 (affect)]
    OP        [reduce using rule 43 (condition)]
    OCL       reduce using rule 29 (bloc_inst)
    OCL       [reduce using rule 33 (affect)]
    OCL       [reduce using rule 43 (condition)]
    $default  reduce using rule 29 (bloc_inst)

    bloc_inst    go to state 168
    instruction  go to state 28
    affect       go to state 29
    condition    go to state 30


state 155

   45 else: OP ELSE . CL bloc_inst OCL ELSE CL

    CL  shift, and go to state 169


state 156

   42 condition: OP IF DP exp_log CL then else OCL . IF CL condition

    IF  shift, and go to state 170


state 157

   16 arraysdec: OP IDF . DP INTEGER SCL arraysdec

    DP  shift, and go to state 171


state 158

   11 arrays: OP ARRAY AS arraytype CL arraysdec OCL . ARRAY CL arrays

    ARRAY  shift, and go to state 172


state 159

   56 exps: exp exps .

    $default  reduce using rule 56 (exps)


state 160

   48 exp_log: OR OPR exp V exps CPR .

    $default  reduce using rule 48 (exp_log)


state 161

   47 exp_log: AND OPR exp V exps CPR .

    $default  reduce using rule 47 (exp_log)


state 162

   50 exp_log: SUP OPR exp V exp CPR .

    $default  reduce using rule 50 (exp_log)


state 163

   52 exp_log: SUPE OPR exp V exp CPR .

    $default  reduce using rule 52 (exp_log)


state 164

   51 exp_log: INF OPR exp V exp CPR .

    $default  reduce using rule 51 (exp_log)


state 165

   53 exp_log: INFE OPR exp V exp CPR .

    $default  reduce using rule 53 (exp_log)


state 166

   54 exp_log: EGA OPR exp V exp CPR .

    $default  reduce using rule 54 (exp_log)


state 167

   55 exp_log: DIF OPR exp V exp CPR .

    $default  reduce using rule 55 (exp_log)


state 168

   44 then: OP THEN CL bloc_inst . OCL THEN CL

    OCL  shift, and go to state 173


state 169

   45 else: OP ELSE CL . bloc_inst OCL ELSE CL

    OP  shift, and go to state 26

    OP        [reduce using rule 33 (affect)]
    OP        [reduce using rule 43 (condition)]
    OCL       reduce using rule 29 (bloc_inst)
    OCL       [reduce using rule 33 (affect)]
    OCL       [reduce using rule 43 (condition)]
    $default  reduce using rule 29 (bloc_inst)

    bloc_inst    go to state 174
    instruction  go to state 28
    affect       go to state 29
    condition    go to state 30


state 170

   42 condition: OP IF DP exp_log CL then else OCL IF . CL condition

    CL  shift, and go to state 175


state 171

   16 arraysdec: OP IDF DP . INTEGER SCL arraysdec

    INTEGER  shift, and go to state 176


state 172

   11 arrays: OP ARRAY AS arraytype CL arraysdec OCL ARRAY . CL arrays

    CL  shift, and go to state 177


state 173

   44 then: OP THEN CL bloc_inst OCL . THEN CL

    THEN  shift, and go to state 178


state 174

   45 else: OP ELSE CL bloc_inst . OCL ELSE CL

    OCL  shift, and go to state 179


state 175

   42 condition: OP IF DP exp_log CL then else OCL IF CL . condition

    OP  shift, and go to state 180

    OP        [reduce using rule 43 (condition)]
    $default  reduce using rule 43 (condition)

    condition  go to state 181


state 176

   16 arraysdec: OP IDF DP INTEGER . SCL arraysdec

    SCL  shift, and go to state 182


state 177

   11 arrays: OP ARRAY AS arraytype CL arraysdec OCL ARRAY CL . arrays

    OP  shift, and go to state 183

    $default  reduce using rule 12 (arrays)

    arrays  go to state 184


state 178

   44 then: OP THEN CL bloc_inst OCL THEN . CL

    CL  shift, and go to state 185


state 179

   45 else: OP ELSE CL bloc_inst OCL . ELSE CL

    ELSE  shift, and go to state 186


state 180

   42 condition: OP . IF DP exp_log CL then else OCL IF CL condition

    IF  shift, and go to state 35


state 181

   42 condition: OP IF DP exp_log CL then else OCL IF CL condition .

    $default  reduce using rule 42 (condition)


state 182

   16 arraysdec: OP IDF DP INTEGER SCL . arraysdec

    OP  shift, and go to state 135

    $default  reduce using rule 17 (arraysdec)

    arraysdec  go to state 187


state 183

   11 arrays: OP . ARRAY AS arraytype CL arraysdec OCL ARRAY CL arrays

    ARRAY  shift, and go to state 46


state 184

   11 arrays: OP ARRAY AS arraytype CL arraysdec OCL ARRAY CL arrays .

    $default  reduce using rule 11 (arrays)


state 185

   44 then: OP THEN CL bloc_inst OCL THEN CL .

    $default  reduce using rule 44 (then)


state 186

   45 else: OP ELSE CL bloc_inst OCL ELSE . CL

    CL  shift, and go to state 188


state 187

   16 arraysdec: OP IDF DP INTEGER SCL arraysdec .

    $default  reduce using rule 16 (arraysdec)


state 188

   45 else: OP ELSE CL bloc_inst OCL ELSE CL .

    $default  reduce using rule 45 (else)
